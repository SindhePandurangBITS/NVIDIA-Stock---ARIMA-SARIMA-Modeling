# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1naQoUGIKRiEpHR2GcqhCHr-mPJsUXOMf
"""

# scripts/modeling.py

import pandas as pd
from pmdarima import auto_arima
from statsmodels.tsa.arima.model import ARIMA

# Train/Test Splitting
def train_test_split(series: pd.Series, train_frac: float = 0.8):
    n = int(len(series) * train_frac)
    return series.iloc[:n], series.iloc[n:]

# Grid search over (p,d,q), auto_arima, AIC/BIC VAlues
def auto_arima_search(
    series: pd.Series,
    p_range=(0,2), d_range=(0,1), q_range=(0,2),
    seasonal=False, m: int = 1
) -> pd.DataFrame:
    results = []
    for p in range(p_range[0], p_range[1]+1):
        for d in range(d_range[0], d_range[1]+1):
            for q in range(q_range[0], q_range[1]+1):
                try:
                    model = auto_arima(
                        series, p=p, d=d, q=q,
                        seasonal=seasonal, m=m,
                        error_action='ignore', suppress_warnings=True
                    )
                    results.append({
                        'p': p, 'd': d, 'q': q,
                        'aic': model.aic(), 'bic': model.bic(),
                        'model': model
                    })
                except Exception:
                    continue
    return pd.DataFrame(results).sort_values('aic').reset_index(drop=True)
# Fit an ARIMA/ SARIMA model
def fit_arima(
    series: pd.Series,
    order: tuple,
    seasonal_order: tuple = (0, 0, 0, 0)
):
    model = ARIMA(series, order=order, seasonal_order=seasonal_order)
    return model.fit()
# out‐of‐sample forecast
def forecast(
    fitted_model,
    steps: int
) -> pd.Series:
    return fitted_model.forecast(steps=steps)